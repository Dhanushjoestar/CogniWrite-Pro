// File: src/main/java/com/cogniwritepro/service/AudienceProfileService.java
package com.cogniwritepro.service;

import com.cogniwritepro.dto.AudienceProfileDTO;
import com.cogniwritepro.model.AudienceProfile;
import com.cogniwritepro.repository.AudienceProfileRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor // Injects AudienceProfileRepository
public class AudienceProfileService {

    private final AudienceProfileRepository audienceProfileRepository;

    @Transactional // Ensures atomicity for database operations
    public AudienceProfileDTO createAudienceProfile(AudienceProfileDTO audienceProfileDTO) {
        // You might want to add validation here, e.g., check if profileName is unique
        if (audienceProfileRepository.findByProfileName(audienceProfileDTO.getProfileName()).isPresent()) {
            throw new IllegalArgumentException("Audience Profile with name '" + audienceProfileDTO.getProfileName() + "' already exists.");
        }

        AudienceProfile audienceProfile = convertDtoToEntity(audienceProfileDTO);
        AudienceProfile savedProfile = audienceProfileRepository.save(audienceProfile);
        return convertEntityToDto(savedProfile);
    }

    public AudienceProfileDTO getAudienceProfileById(Long id) {
        AudienceProfile audienceProfile = audienceProfileRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Audience Profile not found with id: " + id));
        return convertEntityToDto(audienceProfile);
    }

    public List<AudienceProfileDTO> getAllAudienceProfiles() {
        List<AudienceProfile> profiles = audienceProfileRepository.findAll();
        return profiles.stream()
                .map(this::convertEntityToDto)
                .collect(Collectors.toList());
    }

    @Transactional
    public AudienceProfileDTO updateAudienceProfile(Long id, AudienceProfileDTO audienceProfileDTO) {
        AudienceProfile existingProfile = audienceProfileRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Audience Profile not found with id: " + id));

        // Update fields from DTO
        existingProfile.setProfileName(audienceProfileDTO.getProfileName());
        existingProfile.setAgeGroup(audienceProfileDTO.getAgeGroup());
        existingProfile.setPersonaType(audienceProfileDTO.getPersonaType());
        existingProfile.setTone(audienceProfileDTO.getTone());

        AudienceProfile updatedProfile = audienceProfileRepository.save(existingProfile);
        return convertEntityToDto(updatedProfile);
    }

    @Transactional
    public void deleteAudienceProfile(Long id) {
        if (!audienceProfileRepository.existsById(id)) {
            throw new RuntimeException("Audience Profile not found with id: " + id);
        }
        // Before deleting a profile, consider if any ContentRequests are linked to it.
        // You might need to disassociate them or delete cascadingly (if configured)
        audienceProfileRepository.deleteById(id);
    }

    // --- Helper methods for DTO-Entity conversion ---
    private AudienceProfile convertDtoToEntity(AudienceProfileDTO dto) {
        AudienceProfile entity = new AudienceProfile();
        // ID is not set for new entities, it's generated by DB
        entity.setProfileName(dto.getProfileName());
        entity.setAgeGroup(dto.getAgeGroup());
        entity.setPersonaType(dto.getPersonaType());
        entity.setTone(dto.getTone());
        return entity;
    }

    private AudienceProfileDTO convertEntityToDto(AudienceProfile entity) {
        AudienceProfileDTO dto = new AudienceProfileDTO();
        dto.setId(entity.getId());
        dto.setProfileName(entity.getProfileName());
        dto.setAgeGroup(entity.getAgeGroup());
        dto.setPersonaType(entity.getPersonaType());
        dto.setTone(entity.getTone());
        return dto;
    }
}